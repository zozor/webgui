Simple GUI toolkit with go

===========================
Install
===========================

go get github.com/zozor/webgui

===========================
The Idea
===========================

You import webgui and set "handlers" that can be called with javascript, after that you start the server.
webgui.SetHandler(handlername string, func([]byte) []byte)
webgui.StartServer(addr string) //usually localhost

in index.html you use 

<script type="text/javascript" src="webgui"></script>

this loads jquery and the webgui function Communicate into the browser, which lets you call your handlers in go

Communicate(handlername, data, function(jsonobj))

it also loads a ping function that makes sure the server is closed when the index.html page is not active anymore.

===========================
Example
===========================

server.go:

package main

import (
	"webgui"
)

func mainWeb() {
	webgui.SetHandler("test", Dostuff)
}

func main() {
	webgui.StartServer("localhost:27000")
}

func Dostuff(js []byte) []byte { //js argument is whatever data you send. Must return "json object" in []byte form
	return `{"data":"over 9000!"}`
}

index.html:

<html>
<head>
<script type="text/javascript" src="webgui"></script>
<script type="text/javascript">
function CLICK() {
	Communicate("test", {"data": "one"}, function(data) {
		$("#kage").html(data["data"]);
	})
}
</script>
</head>
<body>
<input type="button" value="click me" onclick="CLICK();"/>
<div id="#kage">
</div>
</body>
</html>

===========================
Other info
===========================
It's possible to use resource packing with

webgui.UseResource(files map[string][]byte)

if the client requests a file that does not exist, it looks in this map, before returning 404